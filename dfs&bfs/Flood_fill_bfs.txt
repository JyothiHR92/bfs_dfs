
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        
        List<int[]> directions = Arrays.asList(
        new int[] {1,0},
        new int[] {-1,0} ,
        new int[] {0 , 1},
        new int[] {0 , -1}
        );
        
        int m = image.length;
        if(m ==0)
            return image;
        int n = image[0].length;
        int color = image[sr][sc];
        
        Queue<int[]> queue = new LinkedList<>();
        
        queue.add(new int[] {sr,sc});
        
        Boolean[][] visited = new Boolean[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                visited[i][j] = false;
        
        while(!queue.isEmpty())
        {
            int[] points = queue.poll();
            int r = points[0];
            int c = points[1];
            visited[r][c] = true;
            image[r][c] = newColor;
            for(int[] dir : directions)
            {
                int p = r + dir[0];
                int q = c + dir[1];
                
                if(p < 0 || p >= m || q < 0 || q >= n || image[p][q] != color || visited[p][q] == true)
                {
                    continue;
                }
                
                image[p][q] = newColor;
                queue.add(new int[] {p,q});
            }
        }
        
        return image;
        
    }
}