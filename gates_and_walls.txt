class Solution {
    private static final int empty = Integer.MAX_VALUE;
        private static final int gate = 0;
        private static final List<int[]> direct = Arrays.asList(
        new int[] {1,0},
        new int[] {-1,0},
        new int[] {0,1},
        new int[] {0,-1});
    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length;
        if(m == 0)
            return;
        
        int n = rooms[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        
        for(int row = 0 ; row < m ; row++)
            for(int col = 0 ; col < n; col++)
            {
                if(rooms[row][col] == gate)
                    queue.add(new int[] {row,col});
            }
        
        while(!queue.isEmpty())
        {
            int[] point = queue.poll();
            int row = point[0];
            int col= point[1];
            
            for(int[] dir : direct)
            {
                int r = row + dir[0];
                int c = col + dir[1];
                
                if(r < 0 || r >= m || c < 0 || c >= n || rooms[r][c] != empty)
                {
                    continue;
                }
                rooms[r][c] = rooms[row][col]+1;
                queue.add(new int[] {r,c});
            }
        }
        
    }
}